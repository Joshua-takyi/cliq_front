import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { auth } from "./auth";

// Middleware for role-based access control
export default async function middleware(request: NextRequest) {
  const session = await auth();

  // Check for protected routes that require authentication
  const isProtectedRoute = request.nextUrl.pathname.startsWith("/profile");
  const isAdminRoute = request.nextUrl.pathname.startsWith("/admin");

  // If the user is not authenticated and trying to access a protected route
  if (!session && isProtectedRoute) {
    return NextResponse.redirect(new URL("/auth/signin", request.url));
  }

  // Check admin-only routes
  if (isAdminRoute) {
    const userRole = session?.user?.role;

    if (!session) {
      return NextResponse.redirect(new URL("/auth/signin", request.url));
    }

    if (userRole !== "admin") {
      return NextResponse.redirect(new URL("/", request.url));
    }
  }

  return NextResponse.next();
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: ["/profile/:path*", "/admin/:path*"],
};
